port module Main exposing (main)

import Array exposing (Array)
import Array.Extra as Array
import Browser
import Browser.Dom
import Browser.Events
import Csv
import Html exposing (..)
import Html.Attributes as A
import Html.Events as E
import Html.Lazy exposing (lazy3, lazy4)
import Json.Decode as JD
import Json.Encode as JE
import Task



{--
import Bulma.Modifiers exposing (..)
import Bulma.Modifiers.Typography exposing (textCentered)
import Bulma.Form exposing (..)
import Bulma.Elements exposing (..)
import Bulma.Components exposing (..)
import Bulma.Columns exposing (..)
import Bulma.Layout exposing (..)
--}


-- MAIN


main =
    Browser.element
        { init = init
        , update = update
        , subscriptions = subscriptions
        , view = view
        }



-- MODEL


type alias CellRef =
    { row : Int
    , col : Int
    }


type Cell
    = FloatCell Float
    | StringCell String

type alias AttrCol
    = {
        width : Float
       }

type alias AttrRow
    = {
        height : Float
       }

cellToString : Cell -> String
cellToString cell =
    case cell of
        FloatCell float ->
            String.fromFloat float

        StringCell str ->
            str


type alias Cells = Array (Array Cell)

type alias Table =
    {
      cells: Cells
     ,attr_cols:  Array AttrCol
     ,attr_rows:  Array AttrRow
    }

getTableSize : Table -> CellRef
getTableSize table =
    case Array.get 0 table.cells of
        Just firstRow ->
            CellRef (Array.length table.cells) (Array.length firstRow)

        Nothing ->
            CellRef (Array.length table.cells) 0


toCsv : Table -> String
toCsv table =
    let
        escapeDQ : Cell -> String
        escapeDQ cell =
            if String.contains "\"" <| cellToString cell then
                "\"" ++ (String.replace "\"" "\"\"" <| cellToString cell) ++ "\""

            else
                cellToString cell

        listTable =
            Array.toList <| Array.map (Array.toList << Array.map escapeDQ) table.cells

        -- _ = Debug.log "toCsv: " listTable
    in
    String.join "\n" <| List.map (String.join ",") listTable


fromCsv : String -> Cells
fromCsv csvStr =
    let
        { headers, records } =
            Csv.parse csvStr

        stringToCell : String -> Cell
        stringToCell str =
            case String.toFloat str of
                Just float ->
                    FloatCell float

                Nothing ->
                    StringCell str
    
    in
       Array.fromList <|
           [ Array.fromList <| List.map stringToCell headers ]
               ++ List.map (Array.fromList << List.map stringToCell) records
               


type Select
    = Cell CellRef
    | Csv


type alias InputState =
    { selected : Select
    , isEditing : Bool
    , text : String
    }


type alias Model =
    { table : Table
    , input : InputState
    }

data_list =
  [  [ StringCell "Name", StringCell "Age" , StringCell "Gusa Syou"] 
    ,[ StringCell "Bob",  FloatCell 18 ,     FloatCell 99]
    ,[ StringCell "Sob",  FloatCell 17 ,     FloatCell 0.189]
    ,[ StringCell "Aob",  FloatCell 48 ,     FloatCell 100002]
  ]

init : JE.Value -> ( Model, Cmd Msg )
init data =
    let
        initTable =
            { cells = Array.fromList <| List.map Array.fromList data_list
             ,attr_cols =  Array.fromList  [ {width = 100.0} , {width = 100.0} ,{width = 200.0} ,{width = 100.0} ]
             ,attr_rows =  Array.fromList  [ {height = 30.0}, {height = 20.0},{height = 10.0},{height = 40.0}]
            }

        initInput =
            InputState (Cell <| CellRef 0 0) False ""
    in
--    case JD.decodeValue (JD.array (JD.array jsonToCell)) data of
--        Ok table ->
--            let
--                table_ = { cells = table.cells 
--                          ,cols  = table.cols
--                          ,rows  = table.rows
--                         }
--            in
--            ( Model table_ initInput, Cmd.none )
--
--        Err _ ->
--            ( Model initTable initInput, Cmd.none )
    ( Model initTable initInput, Cmd.none )


jsonToCell : JD.Decoder Cell
jsonToCell =
    JD.field "type" JD.string
        |> JD.andThen toCell


toCell : String -> JD.Decoder Cell
toCell typeStr =
    case typeStr of
        "Float" ->
            JD.map FloatCell (JD.field "Float" JD.float)

        "String" ->
            JD.map StringCell (JD.field "String" JD.string)

        _ ->
            JD.fail "operation JSON to Cell failed"



-- PORT


port saveTable : JE.Value -> Cmd msg


tableToJson : Table -> JE.Value
tableToJson table =
    JE.array (JE.array cellToJson) table.cells


cellToJson : Cell -> JE.Value
cellToJson cell =
    case cell of
        FloatCell float ->
            JE.object [ ( "type", JE.string "Float" ), ( "Float", JE.float float ) ]

        StringCell str ->
            JE.object [ ( "type", JE.string "String" ), ( "String", JE.string str ) ]



-- UPDATE


type Move
    = Up
    | Down
    | Left
    | Right


moveCellRef : Move -> CellRef -> Table -> CellRef
moveCellRef move cellRef table =
    let
        { row, col } =
            cellRef

        size =
            getTableSize table
    in
    case move of
        Up ->
            { cellRef | row = max 0 (row - 1) }

        Down ->
            { cellRef | row = min (size.row - 1) (row + 1) }

        Left ->
            { cellRef | col = max 0 (col - 1) }

        Right ->
            { cellRef | col = min (size.col - 1) (col + 1) }


type Msg
    = Select Select
    | Move Move
    | StartEdit (Maybe CellRef) String
    | CancelEdit
    | Edit String
    | EditCsv String
    | Set
    | AddRow Int
    | AddCol Int
    | DeleteRow Int
    | DeleteCol Int
    | SaveToJs
    | None


focusCellEditor : Cmd Msg
focusCellEditor =
    Task.attempt (\_ -> None) (Browser.Dom.focus "cell-input")


update : Msg -> Model -> ( Model, Cmd Msg )
update msg model =
    case msg of
        Select select ->
            case select of
                Cell cellRef ->
                    ( { model | input = InputState (Cell cellRef) False "" }, Cmd.none )

                Csv ->
                    ( { model | input = InputState Csv True "" }, Cmd.none )

        Move move ->
            case model.input.selected of
                Cell cellRef ->
                    let
                        oldInput =
                            model.input

                        newInput =
                            { oldInput | selected = Cell <| moveCellRef move cellRef model.table }
                    in
                    ( { model | input = newInput }, Cmd.none )

                Csv ->
                    ( model, Cmd.none )

        StartEdit (Just cellRef) text ->
            ( { model | input = InputState (Cell cellRef) True text }, focusCellEditor )

        StartEdit Nothing text ->
            ( { model | input = InputState model.input.selected True text }, focusCellEditor )

        CancelEdit ->
            let
                prevInput =
                    model.input

                newInput =
                    { prevInput | isEditing = False, text = "" }
            in
            ( { model | input = newInput }, Cmd.none )

        Edit text ->
            let
                prevInput =
                    model.input

                newInput =
                    { prevInput | text = text }
            in
            ( { model | input = newInput }, Cmd.none )

        EditCsv csvStr ->
            let
               newTable = model.table 
            in
            update SaveToJs
                -- { model | table = fromCsv csvStr }
                { model | table = { newTable | cells = (fromCsv csvStr)} }

        Set ->
            case model.input.selected of
                Cell cellRef ->
                    case String.toFloat model.input.text of
                        Just num ->
                            update SaveToJs
                                { model
                                    | table = updateData cellRef (FloatCell num) model.table
                                    , input = InputState (Cell cellRef) False ""
                                }

                        Nothing ->
                            update SaveToJs
                                { model
                                    | table = updateData cellRef (StringCell model.input.text) model.table
                                    , input = InputState (Cell cellRef) False ""
                                }

                Csv ->
                    ( model, Cmd.none )

        AddRow rowIndex ->
            let
                ( first, second ) =
                    -- Array.splitAt rowIndex model.table
                    Array.splitAt rowIndex model.table.cells

                { col } =
                    getTableSize model.table

                -- newTable =
                --    Array.append (Array.push (Array.repeat col <| StringCell "") first) second

                newCells =
                    Array.append (Array.push (Array.repeat col <| StringCell "") first) second

                newTable = model.table
            in
            update SaveToJs
                -- { model | table = newTable }
                { model | table = {newTable | cells = newCells }}

        AddCol colIndex ->
            let
                mapFunc : Array Cell -> Array Cell
                mapFunc row =
                    Array.append (Array.push (StringCell "") <| Array.sliceUntil colIndex row) (Array.sliceFrom colIndex row)
                newTable = model.table
            in
            update SaveToJs
                -- { model | table = Array.map mapFunc model.table }
                { model | table = {newTable | cells = Array.map mapFunc model.table.cells }}

        DeleteRow rowIndex ->
            let
                newTable = model.table
            in
            update SaveToJs
                -- { model | table = Array.removeAt rowIndex model.table }
                { model | table = {newTable | cells = Array.removeAt rowIndex model.table.cells }}

        DeleteCol colIndex ->
            let
                newTable = model.table
            in
            update SaveToJs
                -- { model | table = Array.map (Array.removeAt colIndex) model.table }
                { model | table = {newTable | cells = Array.map (Array.removeAt colIndex) model.table.cells }}

        SaveToJs ->
            let
                newTable = model.table
            in
            ( model, saveTable <| tableToJson <| model.table )

        None ->
            ( model, Cmd.none )


updateData : CellRef -> Cell -> Table -> Table
updateData { row, col } data table =
    case Array.get row table.cells of
        Just rowArray ->
            let
              cells = Array.set row (Array.set col data rowArray) table.cells
            in
              { table | cells = cells } 

        Nothing ->
            table



-- SUBSCRIPTIONS


keyDecoderDown : JD.Decoder Msg
keyDecoderDown =
    JD.map toDirection (JD.field "key" JD.string)


toDirection : String -> Msg
toDirection string =
    case String.length string of
        1 ->
            StartEdit Nothing string

        _ ->
            case string of
                "ArrowLeft" ->
                    Move Left

                "ArrowUp" ->
                    Move Up

                "ArrowRight" ->
                    Move Right

                "ArrowDown" ->
                    Move Down

                "Escape" ->
                    CancelEdit

                "Enter" ->
                    StartEdit Nothing ""

                _ ->
                    None


subscriptions : Model -> Sub Msg
subscriptions { input } =
    if input.isEditing then
        Sub.none

    else
        Browser.Events.onKeyDown keyDecoderDown



-- VIEW



view : Model -> Html Msg
view model =
    div [ A.class "wrap" 
         ,A.style "height" "100vh"
         ,A.style "padding-top" "36px"
         ,A.style "width" "100vw"
         ,A.style "min-width" "720px"
         ,A.style "display" "flex"
        ]
        [ div [ A.class "table-wrap", A.id "test" 
              ,A.style "flex" "0 0 50%"
              ,A.style "overflow" "auto"
              ,A.style "position" "relative"
              ]
           [ viewTable model]

        , div [ A.class "other-wrap" 
               ,A.style "flex" "1 1 auto"
               ,A.style "padding" "10px"
               ,A.style "box-shadow" "0 0 5px rgba(0, 0, 0, 0.3)"
              ] [ viewCsv model.table ]
        ]

viewCsv : Table -> Html Msg
viewCsv table =
    div [ A.class "csv-editor" ]
        [ h2 [ A.class "title" ] [ text "CSV" ]
        , textarea
            [ A.class "editor"
            , E.onInput EditCsv
            , E.onFocus <| Select Csv
            , E.onBlur <| Select <| Cell <| CellRef 0 0
            ]
            [ text <| toCsv table ]
        ]


viewTable : Model -> Html Msg
viewTable model =
    table [ A.class "table-editor" ] <|
        viewColHeader (.col <| getTableSize model.table) model.table.attr_cols model.input
            -- :: List.indexedMap (lazy3 viewRow model.input) (Array.toList model.table)
            -- List.indexedMap (lazy3 viewRow model.input)  (Array.toList model.table.rows  Array.toList model.table.cells)
            :: List.indexedMap (lazy3 viewRow (model.input, model.table.attr_rows)) (Array.toList model.table.cells)
            -- :: List.indexedMap (lazy3 viewRow model.input) (Array.toList model.table.cells)


materialIcon : String -> Html Msg
materialIcon iconName =
    i [ A.class "material-icons" ] [ text iconName ]


viewColHeader : Int -> Array AttrCol -> InputState -> Html Msg
viewColHeader colSize cols input =
    let
        rowIndexToAlphabet : Int -> String
        rowIndexToAlphabet index =
            let
                codeOfA =
                    Char.toCode 'A'

                rightString =
                    String.fromChar <| Char.fromCode <| codeOfA + modBy 26 index
            in
            if index < 26 then
                rightString

            else
                (rowIndexToAlphabet <| index // 26 - 1) ++ rightString

        selectedCol =
            case input.selected of
                Cell { col } ->
                    col

                _ ->
                    -1

        buttons : Html Msg
        buttons =
            span [ A.class "col-operate-buttons" ]
                [ button [ E.onClick <| AddCol selectedCol ] [ materialIcon "add" ]
                , button [ E.onClick <| DeleteCol selectedCol ] [ materialIcon "delete" ]
                , button [ E.onClick <| AddCol <| selectedCol + 1 ] [ materialIcon "add" ]
                ]
{--
        getCollWidth : Int -> String
        getCollWidth col =
              case col of
                 0 ->   "200px"
                 1 ->   "120px"
                 2 ->   "80px"
                 _ ->   "10px"
--}

        getCollWidth : Array AttrCol -> Int -> String
        getCollWidth attr_cols_ col_ =
               let
                   attr_col = Array.get col_ attr_cols_
                   width = case attr_col of
                        Just c ->
                            c.width
                        _ ->
                            100.0
               in
                   String.fromFloat width ++ "px"
                   -- "100px"

        headerCell : Int -> Html Msg
        headerCell col =
        --headerCell : Int -> String -> Html Msg
        --headerCell col width =
            td [ A.class "col-header-cell" 
                ,A.style "background-color" "#56cead" --"#ccc"
                ,A.style "font-weight" "normal"
                ,A.style "padding" "5px"
                ,A.style "position" "sticky"
                ,A.style "top" "0px" -- "30px"
                --,A.style "width" "100px" 
                ,A.style "width"  (getCollWidth cols col)
               ]
                [ span [ A.class "inner" 
                        ,A.style "display" "inline-block"
                        ,A.style "text-align" "center"
                        ,A.style "width" "100%"
                        ,A.style "height" "100%"
                        ,A.style "position" "relative"
                       ]
                    [ if col == selectedCol then
                        -- buttons
                        text ""

                      else
                        text ""
                    , span [] [ text <| rowIndexToAlphabet col ]
                    ]
                ]
    in
    tr [ A.class "col-header" ] <|
        td [] []
            :: List.map
                headerCell
                 (List.range 0 (colSize - 1)) 


rowOperationButtons : Int -> Html Msg
rowOperationButtons row =
    span [ A.class "row-operate-buttons" ]
        [ button [ E.onClick <| AddRow row ] [ materialIcon "add" ]
        , button [ E.onClick <| DeleteRow row ] [ materialIcon "delete" ]
        , button [ E.onClick <| AddRow <| row + 1 ] [ materialIcon "add" ]
        ]


viewRow : (InputState, Array AttrRow) ->  Int ->  Array Cell -> Html Msg
viewRow (inputState,rows) row data =
--viewRow : InputState -> Int -> Array Cell -> Html Msg
--viewRow inputState row data =
    let
        selectedRow =
            case inputState.selected of
                Cell ref ->
                    ref.row

                _ ->
                    -1
{--
        getRowHeight : Int -> String
        getRowHeight row_ =
              case row_ of
                 0 ->   "30px"
                 1 ->   "12px"
                 2 ->   "8px"
                 _ ->   "10px"
--}

        getRowHeight : Array AttrRow -> Int -> String
        getRowHeight rows_ row_ =
               let
                   row_a = Array.get row_ rows_
                   height = case row_a of
                        Just r ->
                            r.height
                        _ ->
                            10.0
               in
                   String.fromFloat height ++ "px"

    in
    tr [ A.class "data-row" ] <|
        th [ A.class "row-header-cell" 
            ,A.style "background-color" "#ccc"
            ,A.style "font-weight" "normal"
            ,A.style "padding" "5px"
            ,A.style "position" "sticky"
            ,A.style "left" "0px" --"30px"
           ]
            [ span [ A.class "inner" 
                    ,A.style "display" "inline-block"
                    ,A.style "text-align" "center"
                    ,A.style "width" "100%"
                    --,A.style "height" "100%"
                    --,A.style "height" "100px"
                    --,A.style "height" (getRowHeight row)
                    ,A.style "height" (getRowHeight rows row)
                    ,A.style "position" "relative"
                   ]
                [ if row == selectedRow then
                    -- rowOperationButtons selectedRow
                    text ""

                  else
                    text ""
                , span [] [ text <| String.fromInt <| row + 1 ]
                ]
            ]
            :: List.indexedMap (lazy4 viewCell inputState row) (Array.toList data)


viewCell : InputState -> Int -> Int -> Cell -> Html Msg
viewCell inputState row col cell =
    let
        cellRef =
            CellRef row col

        isSelected =
            inputState.selected == Cell cellRef
    in
    if inputState.isEditing && isSelected then
        td [ A.class "cell", A.class "-selected" 
            ,A.style "border" "3px solid red"
            ,A.style "padding" "3px"
        
           ]
            [ form [ E.onSubmit Set ]
                [ input
                    [ A.id "cell-input"
                    , A.value inputState.text
                    , E.onInput Edit
                    , onEscapeKey
                    ]
                    []
                ]
            ]

    else
     if isSelected then
        td
            [ A.class "cell"
            , A.class <|
                if isSelected then
                    "-selected"

                else
                    ""
             , A.style "border" "1px solid blue"
             , A.style "padding" "1px"
             , A.style "min-width" "100px"
            , E.onClick (Select <| Cell cellRef)
            , E.onDoubleClick (StartEdit (Just cellRef) <| cellToString cell)
            ]
            [ text <| cellToString cell ]

     else
        td
            [ A.class "cell"
            , A.class <|
                if isSelected then
                    "-selected"

                else
                    ""
            , A.style "border" "0.05px solid gray"
            , A.style "padding" "1px"
            , E.onClick (Select <| Cell cellRef)
            , E.onDoubleClick (StartEdit (Just cellRef) <| cellToString cell)
            ]
            [ text <| cellToString cell ]

onEscapeKey : Attribute Msg
onEscapeKey =
    let
        func : String -> Msg
        func key =
            if key == "Escape" then
                CancelEdit

            else
                None
    in
    E.on "keydown" (JD.map func (JD.field "key" JD.string))
